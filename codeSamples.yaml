overlay: 1.0.0
info:
  title: CodeSamples overlay for python target
  version: 0.0.0
actions:
  - target: $["paths"]["/access-control/signing-key"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSigningKeys
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.access_control.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createSigningKey
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.access_control.create()

            if res.signing_key is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteSigningKey
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.access_control.delete(key_id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSigningKey
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.access_control.get(key_id="<value>")

            if res.signing_key is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["patch"]
    update:
      x-codeSamples:
        - lang: python
          label: updateSigningKey
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.access_control.update(key_id="<value>", request_body={})

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/api/beta/generate/audio-to-text"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genAudioToText
          source: |-
            from livepeer import Livepeer
            from livepeer.models import operations

            s = Livepeer()

            res = s.generate.audio_to_text(security=operations.GenAudioToTextSecurity(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ), request={
                "audio": {
                    "file_name": "example.file",
                    "content": open("example.file", "rb"),
                },
            })

            if res.text_response is not None:
                # handle response
                pass
  - target: $["paths"]["/api/beta/generate/image-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genImageToImage
          source: |-
            from livepeer import Livepeer
            from livepeer.models import operations

            s = Livepeer()

            res = s.generate.image_to_image(security=operations.GenImageToImageSecurity(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ), request={
                "prompt": "<value>",
                "image": {
                    "file_name": "example.file",
                    "content": open("example.file", "rb"),
                },
            })

            if res.image_response is not None:
                # handle response
                pass
  - target: $["paths"]["/api/beta/generate/image-to-video"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genImageToVideo
          source: |-
            from livepeer import Livepeer
            from livepeer.models import operations

            s = Livepeer()

            res = s.generate.image_to_video(security=operations.GenImageToVideoSecurity(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ), request={
                "image": {
                    "file_name": "example.file",
                    "content": open("example.file", "rb"),
                },
            })

            if res.video_response is not None:
                # handle response
                pass
  - target: $["paths"]["/api/beta/generate/segment-anything-2"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genSegmentAnything2
          source: |-
            from livepeer import Livepeer
            from livepeer.models import operations

            s = Livepeer()

            res = s.generate.segment_anything2(security=operations.GenSegmentAnything2Security(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ), request={
                "image": {
                    "file_name": "example.file",
                    "content": open("example.file", "rb"),
                },
            })

            if res.masks_response is not None:
                # handle response
                pass
  - target: $["paths"]["/api/beta/generate/text-to-image"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genTextToImage
          source: |-
            from livepeer import Livepeer
            from livepeer.models import operations

            s = Livepeer()

            res = s.generate.text_to_image(security=operations.GenTextToImageSecurity(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ), request={
                "prompt": "<value>",
            })

            if res.image_response is not None:
                # handle response
                pass
  - target: $["paths"]["/api/beta/generate/upscale"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: genUpscale
          source: |-
            from livepeer import Livepeer
            from livepeer.models import operations

            s = Livepeer()

            res = s.generate.upscale(security=operations.GenUpscaleSecurity(
                http_bearer="<YOUR_BEARER_TOKEN_HERE>",
            ), request={
                "prompt": "<value>",
                "image": {
                    "file_name": "example.file",
                    "content": open("example.file", "rb"),
                },
            })

            if res.image_response is not None:
                # handle response
                pass
  - target: $["paths"]["/asset"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getAssets
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.asset.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/request-upload"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: requestUpload
          source: |-
            from livepeer import Livepeer
            from livepeer.models import components

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.asset.create(request={
                "name": "filename.mp4",
                "static_mp4": True,
                "playback_policy": {
                    "type": components.Type.WEBHOOK,
                    "webhook_id": "1bde4o2i6xycudoy",
                    "webhook_context": {
                        "streamerId": "my-custom-id",
                    },
                    "refresh_interval": 600,
                },
                "profiles": [
                    {
                        "width": 1280,
                        "name": "720p",
                        "height": 720,
                        "bitrate": 3000000,
                        "quality": 23,
                        "fps": 30,
                        "fps_den": 1,
                        "gop": "2",
                        "profile": components.TranscodeProfileProfile.H264_BASELINE,
                        "encoder": components.TranscodeProfileEncoder.H_264,
                    },
                ],
            })

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/upload/url"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: uploadAsset
          source: |-
            from livepeer import Livepeer
            from livepeer.models import components

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.asset.create_via_url(request={
                "name": "filename.mp4",
                "static_mp4": True,
                "playback_policy": {
                    "type": components.Type.WEBHOOK,
                    "webhook_id": "1bde4o2i6xycudoy",
                    "webhook_context": {
                        "streamerId": "my-custom-id",
                    },
                    "refresh_interval": 600,
                },
                "url": "https://s3.amazonaws.com/my-bucket/path/filename.mp4",
                "profiles": [
                    {
                        "width": 1280,
                        "name": "720p",
                        "height": 720,
                        "bitrate": 3000000,
                        "quality": 23,
                        "fps": 30,
                        "fps_den": 1,
                        "gop": "2",
                        "profile": components.TranscodeProfileProfile.H264_BASELINE,
                        "encoder": components.TranscodeProfileEncoder.H_264,
                    },
                ],
            })

            if res.two_hundred_application_json_data is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/{assetId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteAsset
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.asset.delete(asset_id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/{assetId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getAsset
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.asset.get(asset_id="<value>")

            if res.asset is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/{assetId}"]["patch"]
    update:
      x-codeSamples:
        - lang: python
          label: updateAsset
          source: |-
            from livepeer import Livepeer
            from livepeer.models import components

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.asset.update(asset_id="<value>", asset_patch_payload={
                "name": "filename.mp4",
                "playback_policy": {
                    "type": components.Type.WEBHOOK,
                    "webhook_id": "1bde4o2i6xycudoy",
                    "webhook_context": {
                        "streamerId": "my-custom-id",
                    },
                    "refresh_interval": 600,
                },
            })

            if res.asset is not None:
                # handle response
                pass
  - target: $["paths"]["/clip"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createClip
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.create_clip(request={
                "playback_id": "eaw4nk06ts2d0mzb",
                "start_time": 1587667174725,
                "end_time": 1587667174725,
                "name": "My Clip",
                "session_id": "de7818e7-610a-4057-8f6f-b785dc1e6f88",
            })

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/data/usage/query"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getUsageMetrics
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.get_usage(request={})

            if res.usage_metric is not None:
                # handle response
                pass
  - target: $["paths"]["/data/views/now"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRealtimeViewershipNow
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.get_realtime_viewership()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/data/views/query"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getViewershipMetrics
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.get_viewership(request={})

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/data/views/query/creator"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getCreatorViewershipMetrics
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.get_creator_viewership(request={})

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/data/views/query/total/{playbackId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPublicViewershipMetrics
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.metrics.get_public_viewership(playback_id="<value>")

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getMultistreamTargets
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.multistream.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMultistreamTarget
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.multistream.create(request={
                "url": "rtmps://live.my-service.tv/channel/secretKey",
            })

            if res.multistream_target is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteMultistreamTarget
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.multistream.delete(id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getMultistreamTarget
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.multistream.get(id="<id>")

            if res.multistream_target is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: python
          label: updateMultistreamTarget
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.multistream.update(id="<id>", multistream_target_patch_payload={
                "url": "rtmps://live.my-service.tv/channel/secretKey",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/playback/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPlaybackInfo
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.playback.get(id="<id>")

            if res.playback_info is not None:
                # handle response
                pass
  - target: $["paths"]["/room"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createRoom
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.create()

            if res.create_room_response is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteRoom
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.delete(id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRoom
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.get(id="<id>")

            if res.room is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/egress"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: stopRoomEgress
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.stop_egress(id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/egress"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: startRoomEgress
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.start_egress(id="<id>", room_egress_payload={
                "stream_id": "aac12556-4d65-4d34-9fb6-d1f0985eb0a9",
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/user"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createRoomUser
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.create_user(id="<id>", room_user_payload={
                "name": "name",
                "can_publish": True,
                "can_publish_data": True,
            })

            if res.room_user_response is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/user/{userId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteRoomUser
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.delete_user(id="<id>", user_id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/user/{userId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRoomUser
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.get_user(id="<id>", user_id="<value>")

            if res.get_room_user_response is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/user/{userId}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateRoomUser
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.room.update_user(id="<id>", user_id="<value>", room_user_update_payload={
                "can_publish": True,
                "can_publish_data": True,
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/session"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSessions
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.session.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/session/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSession
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.session.get(id="<id>")

            if res.session is not None:
                # handle response
                pass
  - target: $["paths"]["/session/{id}/clips"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSessionClips
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.session.get_clips(id="<id>")

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/stream"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getStreams
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/stream"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createStream
          source: |-
            from livepeer import Livepeer
            from livepeer.models import components

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.create(request={
                "name": "test_stream",
                "pull": {
                    "source": "https://myservice.com/live/stream.flv",
                    "headers": {
                        "Authorization": "Bearer 123",
                    },
                    "location": {
                        "lat": 39.739,
                        "lon": -104.988,
                    },
                },
                "playback_policy": {
                    "type": components.Type.WEBHOOK,
                    "webhook_id": "1bde4o2i6xycudoy",
                    "webhook_context": {
                        "streamerId": "my-custom-id",
                    },
                    "refresh_interval": 600,
                },
                "profiles": [
                    {
                        "width": 1280,
                        "name": "720p",
                        "height": 720,
                        "bitrate": 3000000,
                        "fps": 30,
                        "fps_den": 1,
                        "quality": 23,
                        "gop": "2",
                        "profile": components.Profile.H264_BASELINE,
                    },
                ],
                "record": False,
                "recording_spec": {
                    "profiles": [
                        {
                            "width": 1280,
                            "name": "720p",
                            "height": 720,
                            "bitrate": 3000000,
                            "quality": 23,
                            "fps": 30,
                            "fps_den": 1,
                            "gop": "2",
                            "profile": components.TranscodeProfileProfile.H264_BASELINE,
                            "encoder": components.TranscodeProfileEncoder.H_264,
                        },
                    ],
                },
                "multistream": {
                    "targets": [
                        {
                            "profile": "720p",
                            "video_only": False,
                            "id": "PUSH123",
                            "spec": {
                                "name": "My target",
                                "url": "rtmps://live.my-service.tv/channel/secretKey",
                            },
                        },
                    ],
                },
            })

            if res.stream is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteStream
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.delete(id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getStream
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.get(id="<id>")

            if res.stream is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: python
          label: updateStream
          source: |-
            from livepeer import Livepeer
            from livepeer.models import components

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.update(id="<id>", stream_patch_payload={
                "record": False,
                "multistream": {
                    "targets": [
                        {
                            "profile": "720p",
                            "video_only": False,
                            "id": "PUSH123",
                            "spec": {
                                "name": "My target",
                                "url": "rtmps://live.my-service.tv/channel/secretKey",
                            },
                        },
                    ],
                },
                "playback_policy": {
                    "type": components.Type.WEBHOOK,
                    "webhook_id": "1bde4o2i6xycudoy",
                    "webhook_context": {
                        "streamerId": "my-custom-id",
                    },
                    "refresh_interval": 600,
                },
                "profiles": [
                    {
                        "width": 1280,
                        "name": "720p",
                        "height": 720,
                        "bitrate": 3000000,
                        "fps": 30,
                        "fps_den": 1,
                        "quality": 23,
                        "gop": "2",
                        "profile": components.Profile.H264_BASELINE,
                    },
                ],
                "recording_spec": {
                    "profiles": [
                        {
                            "width": 1280,
                            "name": "720p",
                            "height": 720,
                            "bitrate": 3000000,
                            "quality": 23,
                            "fps": 30,
                            "fps_den": 1,
                            "gop": "2",
                            "profile": components.TranscodeProfileProfile.H264_BASELINE,
                            "encoder": components.TranscodeProfileEncoder.H_264,
                        },
                    ],
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/clips"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getClips
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.get_clips(id="<id>")

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/create-multistream-target"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: addMultistreamTarget
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.add_multistream_target(id="<id>", target_add_payload={
                "profile": "720p0",
                "video_only": False,
                "id": "PUSH123",
                "spec": {
                    "name": "My target",
                    "url": "rtmps://live.my-service.tv/channel/secretKey",
                },
            })

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/multistream/{targetId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: removeMultistreamTarget
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.remove_multistream_target(id="<id>", target_id="<value>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/start-pull"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: startPullStream
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.start_pull(id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/terminate"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: terminateStream
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.stream.terminate(id="<id>")

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{parentId}/sessions"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRecordedSessions
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.session.get_recorded(parent_id="<value>", record=True)

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/task"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getTasks
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.task.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/task/{taskId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getTask
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.task.get(task_id="<value>")

            if res.task is not None:
                # handle response
                pass
  - target: $["paths"]["/transcode"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: transcodeVideo
          source: |-
            from livepeer import Livepeer
            from livepeer.models import components

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.transcode.create(request={
                "input": {
                    "url": "https://s3.amazonaws.com/bucket/file.mp4",
                },
                "storage": {
                    "type": components.StorageType.S3,
                    "endpoint": "https://gateway.storjshare.io",
                    "bucket": "outputbucket",
                    "credentials": {
                        "access_key_id": "AKIAIOSFODNN7EXAMPLE",
                        "secret_access_key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
                    },
                },
                "outputs": {
                    "hls": {
                        "path": "/samplevideo/hls",
                    },
                    "mp4": {
                        "path": "/samplevideo/mp4",
                    },
                    "fmp4": {
                        "path": "/samplevideo/fmp4",
                    },
                },
                "profiles": [
                    {
                        "width": 1280,
                        "name": "720p",
                        "height": 720,
                        "bitrate": 3000000,
                        "quality": 23,
                        "fps": 30,
                        "fps_den": 1,
                        "gop": "2",
                        "profile": components.TranscodeProfileProfile.H264_BASELINE,
                        "encoder": components.TranscodeProfileEncoder.H_264,
                    },
                ],
            })

            if res.task is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getWebhooks
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.webhook.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createWebhook
          source: |-
            from livepeer import Livepeer
            from livepeer.models import components

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.webhook.create(request={
                "name": "test_webhook",
                "project_id": "aac12556-4d65-4d34-9fb6-d1f0985eb0a9",
                "events": [
                    components.Events.STREAM_STARTED,
                    components.Events.STREAM_IDLE,
                ],
                "url": "https://my-service.com/webhook",
                "shared_secret": "my-secret",
                "stream_id": "de7818e7-610a-4057-8f6f-b785dc1e6f88",
            })

            if res.webhook is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteWebhook
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.webhook.delete(id="<id>")

            if res.webhook is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getWebhook
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.webhook.get(id="<id>")

            if res.webhook is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateWebhook
          source: |-
            from livepeer import Livepeer
            from livepeer.models import components

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.webhook.update(id="<id>", webhook={
                "name": "test_webhook",
                "project_id": "aac12556-4d65-4d34-9fb6-d1f0985eb0a9",
                "events": [
                    components.Events.STREAM_STARTED,
                    components.Events.STREAM_IDLE,
                ],
                "url": "https://my-service.com/webhook",
                "shared_secret": "my-secret",
                "stream_id": "de7818e7-610a-4057-8f6f-b785dc1e6f88",
            })

            if res.webhook is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}/log"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getWebhookLogs
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.webhook.get_logs(id="<id>")

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}/log/{logId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getWebhookLog
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.webhook.get_log(id="<id>", log_id="<value>")

            if res.webhook_log is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}/log/{logId}/resend"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: resendWebhook
          source: |-
            from livepeer import Livepeer

            s = Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )

            res = s.webhook.resend_log(id="<id>", log_id="<value>")

            if res.webhook_log is not None:
                # handle response
                pass
