overlay: 1.0.0
info:
  title: CodeSamples overlay for python target
  version: 0.0.0
actions:
  - target: $["paths"]["/webhook/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getWebhook
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.get(id='<value>')

            if res.webhook is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateWebhook
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.update(id='<value>', webhook=components.WebhookInput(
                name='test_webhook',
                project_id='aac12556-4d65-4d34-9fb6-d1f0985eb0a9',
                events=[
                    components.Events.STREAM_STARTED,
                    components.Events.STREAM_IDLE,
                ],
                url='https://my-service.com/webhook',
                shared_secret='my-secret',
                stream_id='de7818e7-610a-4057-8f6f-b785dc1e6f88',
            ))

            if res.webhook is not None:
                # handle response
                pass
  - target: $["paths"]["/room"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createRoom
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.create()

            if res.create_room_response is not None:
                # handle response
                pass
  - target: $["paths"]["/data/views/query/creator"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getCreatorViewershipMetrics
          source: |-
            import livepeer
            from livepeer.models import operations

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.metrics.get_creator_viewership(request=operations.GetCreatorViewershipMetricsRequest())

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createSigningKey
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.create()

            if res.signing_key is not None:
                # handle response
                pass
  - target: $["paths"]["/data/views/query"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getViewershipMetrics
          source: |-
            import livepeer
            from livepeer.models import operations

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.metrics.get_viewership(request=operations.GetViewershipMetricsRequest())

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/data/usage/query"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getUsageMetrics
          source: |-
            import livepeer
            from livepeer.models import operations

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.metrics.get_usage(request=operations.GetUsageMetricsRequest())

            if res.usage_metric is not None:
                # handle response
                pass
  - target: $["paths"]["/task"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getTasks
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.task.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createWebhook
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.create(request=components.WebhookInput(
                name='test_webhook',
                project_id='aac12556-4d65-4d34-9fb6-d1f0985eb0a9',
                events=[
                    components.Events.STREAM_STARTED,
                    components.Events.STREAM_IDLE,
                ],
                url='https://my-service.com/webhook',
                shared_secret='my-secret',
                stream_id='de7818e7-610a-4057-8f6f-b785dc1e6f88',
            ))

            if res.webhook is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getStream
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.get(id='<value>')

            if res.stream is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: python
          label: updateStream
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.update(id='<value>', stream_patch_payload=components.StreamPatchPayload(
                record=False,
                multistream=components.Multistream(
                    targets=[
                        components.Target(
                            profile='720p',
                            video_only=False,
                            id='PUSH123',
                            spec=components.TargetSpec(
                                name='My target',
                                url='rtmps://live.my-service.tv/channel/secretKey',
                            ),
                        ),
                    ],
                ),
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
                profiles=[
                    components.FfmpegProfile(
                        width=1280,
                        name='720p',
                        height=857478,
                        bitrate=3000000,
                        fps=30,
                        fps_den=1,
                        quality=23,
                        gop='2',
                        profile=components.Profile.H264_BASELINE,
                    ),
                ],
            ))

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteMultistreamTarget
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.delete(id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getWebhooks
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSigningKey
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.get(key_id='<value>')

            if res.signing_key is not None:
                # handle response
                pass
  - target: $["paths"]["/stream"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createStream
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.create(request=components.NewStreamPayload(
                name='test_stream',
                pull=components.Pull(
                    source='https://myservice.com/live/stream.flv',
                    headers={
                        'Authorization': 'Bearer 123',
                    },
                    location=components.Location(
                        lat=39.739,
                        lon=-104.988,
                    ),
                ),
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
                profiles=[
                    components.FfmpegProfile(
                        width=1280,
                        name='720p',
                        height=486589,
                        bitrate=3000000,
                        fps=30,
                        fps_den=1,
                        quality=23,
                        gop='2',
                        profile=components.Profile.H264_BASELINE,
                    ),
                ],
                record=False,
                recording_spec=components.RecordingSpec(
                    profiles=[
                        components.FfmpegProfile(
                            width=1280,
                            name='720p',
                            height=489382,
                            bitrate=3000000,
                            fps=30,
                            fps_den=1,
                            quality=23,
                            gop='2',
                            profile=components.Profile.H264_BASELINE,
                        ),
                    ],
                ),
                multistream=components.Multistream(
                    targets=[
                        components.Target(
                            profile='720p',
                            video_only=False,
                            id='PUSH123',
                            spec=components.TargetSpec(
                                name='My target',
                                url='rtmps://live.my-service.tv/channel/secretKey',
                            ),
                        ),
                    ],
                ),
            ))

            if res.stream is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/user/{userId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteRoomUser
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.delete_user(id='<value>', user_id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/task/{taskId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getTask
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.task.get(task_id='<value>')

            if res.task is not None:
                # handle response
                pass
  - target: $["paths"]["/playback/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPlaybackInfo
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.playback.get(id='<value>')

            if res.playback_info is not None:
                # handle response
                pass
  - target: $["paths"]["/clip"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createClip
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.create_clip(request=components.ClipPayload(
                playback_id='eaw4nk06ts2d0mzb',
                start_time=1587667174725,
                end_time=1587667174725,
                name='My Clip',
                session_id='de7818e7-610a-4057-8f6f-b785dc1e6f88',
            ))

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/asset"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getAssets
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/session/{id}/clips"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSessionClips
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.session.get_clips(id='<value>')

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/session/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSession
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.session.get(id='<value>')

            if res.session is not None:
                # handle response
                pass
  - target: $["paths"]["/transcode"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: transcodeVideo
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.transcode.create(request=components.TranscodePayload(
                input=components.Input1(
                    url='https://s3.amazonaws.com/bucket/file.mp4',
                ),
                storage=components.Storage1(
                    type=components.StorageType.S3,
                    endpoint='https://gateway.storjshare.io',
                    bucket='outputbucket',
                    credentials=components.StorageCredentials(
                        access_key_id='AKIAIOSFODNN7EXAMPLE',
                        secret_access_key='wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY',
                    ),
                ),
                outputs=components.Outputs(
                    hls=components.Hls(
                        path='/samplevideo/hls',
                    ),
                    mp4=components.Mp4(
                        path='/samplevideo/mp4',
                    ),
                    fmp4=components.Fmp4(
                        path='/samplevideo/fmp4',
                    ),
                ),
                profiles=[
                    components.TranscodeProfile(
                        width=1280,
                        name='720p',
                        bitrate=3000000,
                        quality=23,
                        fps=30,
                        fps_den=1,
                        gop='2',
                        profile=components.TranscodeProfileProfile.H264_BASELINE,
                        encoder=components.TranscodeProfileEncoder.H_264,
                    ),
                ],
            ))

            if res.task is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/clips"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getClips
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.get_clips(id='<value>')

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getMultistreamTargets
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getMultistreamTarget
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.get(id='<value>')

            if res.multistream_target is not None:
                # handle response
                pass
  - target: $["paths"]["/stream"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getStreams
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.get_all(streamsonly='<value>')

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/user/{userId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRoomUser
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.get_user(id='<value>', user_id='<value>')

            if res.get_room_user_response is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createMultistreamTarget
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.create(request=components.MultistreamTargetInput(
                url='rtmps://live.my-service.tv/channel/secretKey',
            ))

            if res.multistream_target is not None:
                # handle response
                pass
  - target: $["paths"]["/multistream/target/{id}"]["patch"]
    update:
      x-codeSamples:
        - lang: python
          label: updateMultistreamTarget
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.multistream.update(id='<value>', multistream_target_patch_payload=components.MultistreamTargetPatchPayload(
                url='rtmps://live.my-service.tv/channel/secretKey',
            ))

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/terminate"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: terminateStream
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.terminate(id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{parentId}/sessions"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRecordedSessions
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.session.get_recorded(parent_id='<value>', record=True)

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getRoom
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.get(id='<value>')

            if res.room is not None:
                # handle response
                pass
  - target: $["paths"]["/data/views/query/total/{playbackId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getPublicViewershipMetrics
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.metrics.get_public_viewership(playback_id='<value>')

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteSigningKey
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.delete(key_id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/request-upload"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: requestUpload
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.create(request=components.NewAssetPayload(
                name='filename.mp4',
                static_mp4=True,
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
                profiles=[
                    components.TranscodeProfile(
                        width=1280,
                        name='720p',
                        bitrate=3000000,
                        quality=23,
                        fps=30,
                        fps_den=1,
                        gop='2',
                        profile=components.TranscodeProfileProfile.H264_BASELINE,
                        encoder=components.TranscodeProfileEncoder.H_264,
                    ),
                ],
            ))

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/{assetId}"]["patch"]
    update:
      x-codeSamples:
        - lang: python
          label: updateAsset
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.update(asset_id='<value>', asset_patch_payload=components.AssetPatchPayload(
                name='filename.mp4',
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
            ))

            if res.asset is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}/log/{logId}/resend"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: resendWebhook
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.resend_log(id='<value>', log_id='<value>')

            if res.webhook_log is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}/log"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getWebhookLogs
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.get_logs(id='<value>')

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/egress"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: stopRoomEgress
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.stop_egress(id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSigningKeys
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/access-control/signing-key/{keyId}"]["patch"]
    update:
      x-codeSamples:
        - lang: python
          label: updateSigningKey
          source: |-
            import livepeer
            from livepeer.models import operations

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.access_control.update(key_id='<value>', request_body=operations.UpdateSigningKeyRequestBody())

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/multistream/{targetId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: removeMultistreamTarget
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.remove_multistream_target(id='<value>', target_id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/create-multistream-target"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: addMultistreamTarget
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.add_multistream_target(id='<value>', target_add_payload=components.TargetAddPayload(
                profile='720p0',
                video_only=False,
                id='PUSH123',
                spec=components.TargetAddPayloadSpec(
                    name='My target',
                    url='rtmps://live.my-service.tv/channel/secretKey',
                ),
            ))

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/user/{userId}"]["put"]
    update:
      x-codeSamples:
        - lang: python
          label: updateRoomUser
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.update_user(id='<value>', user_id='<value>', room_user_update_payload=components.RoomUserUpdatePayload(
                can_publish=True,
                can_publish_data=True,
            ))

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}/start-pull"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: startPullStream
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.start_pull(id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/{assetId}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteAsset
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.delete(asset_id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/session"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getSessions
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.session.get_all()

            if res.data is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/egress"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: startRoomEgress
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.start_egress(id='<value>', room_egress_payload=components.RoomEgressPayload(
                stream_id='aac12556-4d65-4d34-9fb6-d1f0985eb0a9',
            ))

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteWebhook
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.delete(id='<value>')

            if res.webhook is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}/user"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: createRoomUser
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.create_user(id='<value>', room_user_payload=components.RoomUserPayload(
                name='name',
                can_publish=True,
                can_publish_data=True,
            ))

            if res.room_user_response is not None:
                # handle response
                pass
  - target: $["paths"]["/stream/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteStream
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.stream.delete(id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/upload/url"]["post"]
    update:
      x-codeSamples:
        - lang: python
          label: uploadAsset
          source: |-
            import livepeer
            from livepeer.models import components

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.create_via_url(request=components.NewAssetFromURLPayload(
                name='filename.mp4',
                static_mp4=True,
                playback_policy=components.PlaybackPolicy(
                    type=components.Type.WEBHOOK,
                    webhook_id='1bde4o2i6xycudoy',
                    webhook_context={
                        'streamerId': 'my-custom-id',
                    },
                    refresh_interval=600,
                ),
                url='https://s3.amazonaws.com/my-bucket/path/filename.mp4',
                profiles=[
                    components.TranscodeProfile(
                        width=1280,
                        name='720p',
                        bitrate=3000000,
                        quality=23,
                        fps=30,
                        fps_den=1,
                        gop='2',
                        profile=components.TranscodeProfileProfile.H264_BASELINE,
                        encoder=components.TranscodeProfileEncoder.H_264,
                    ),
                ],
            ))

            if res.two_hundred_application_json_data is not None:
                # handle response
                pass
  - target: $["paths"]["/asset/{assetId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getAsset
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.asset.get(asset_id='<value>')

            if res.asset is not None:
                # handle response
                pass
  - target: $["paths"]["/room/{id}"]["delete"]
    update:
      x-codeSamples:
        - lang: python
          label: deleteRoom
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.room.delete(id='<value>')

            if res is not None:
                # handle response
                pass
  - target: $["paths"]["/webhook/{id}/log/{logId}"]["get"]
    update:
      x-codeSamples:
        - lang: python
          label: getWebhookLog
          source: |-
            import livepeer

            s = livepeer.Livepeer(
                api_key="<YOUR_BEARER_TOKEN_HERE>",
            )


            res = s.webhook.get_log(id='<value>', log_id='<value>')

            if res.webhook_log is not None:
                # handle response
                pass
