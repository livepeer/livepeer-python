"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .nftmetadata import NftMetadata
from .nftmetadatatemplate import NftMetadataTemplate
from dataclasses_json import Undefined, dataclass_json
from sdk import utils
from typing import Optional, Union


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IpfsExportParams2:
    r"""Custom credentials for the Piñata service. Must have either
    a JWT or an API key and an API secret.
    """
    api_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiKey') }})
    r"""Will be added to the pinata_api_key header."""
    api_secret: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('apiSecret') }})
    r"""Will be added to the pinata_secret_api_key header."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IpfsExportParamsSchemas1:
    r"""Custom credentials for the Piñata service. Must have either
    a JWT or an API key and an API secret.
    """
    jwt: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('jwt') }})
    r"""Will be added to the Authorization header as a
    Bearer token.
    """
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class IpfsExportParams1:
    nft_metadata: Optional[NftMetadata] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nftMetadata'), 'exclude': lambda f: f is None }})
    r"""Additional data to add to the NFT metadata exported to
    IPFS. Will be deep merged with the default metadata
    exported.
    """
    nft_metadata_template: Optional[NftMetadataTemplate] = dataclasses.field(default=NftMetadataTemplate.FILE, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('nftMetadataTemplate'), 'exclude': lambda f: f is None }})
    r"""Name of the NFT metadata template to export. 'player'
    will embed the Livepeer Player on the NFT while 'file'
    will reference only the immutable MP4 files.
    """
    pinata: Optional[Union[IpfsExportParamsSchemas1, IpfsExportParams2]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('pinata'), 'exclude': lambda f: f is None }})
    r"""Custom credentials for the Piñata service. Must have either
    a JWT or an API key and an API secret.
    """
    

