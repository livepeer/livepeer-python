"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .attestation import Attestation
from .playback_policy import PlaybackPolicy
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import List, Optional

class PlaybackInfoType(str, Enum):
    LIVE = 'live'
    VOD = 'vod'
    RECORDING = 'recording'

class Hrn(str, Enum):
    r"""Human Readable Name"""
    HLS_TS_ = 'HLS (TS)'
    MP4 = 'MP4'
    WEB_RTC_H264_ = 'WebRTC (H264)'
    THUMBNAIL_JPEG_ = 'Thumbnail (JPEG)'
    THUMBNAILS = 'Thumbnails'

class PlaybackInfoSchemasType(str, Enum):
    HTML5_APPLICATION_VND_APPLE_MPEGURL = 'html5/application/vnd.apple.mpegurl'
    HTML5_VIDEO_MP4 = 'html5/video/mp4'
    HTML5_VIDEO_H264 = 'html5/video/h264'
    IMAGE_JPEG = 'image/jpeg'
    TEXT_VTT = 'text/vtt'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlaybackInfoSource:
    hrn: Hrn = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hrn') }})
    r"""Human Readable Name"""
    type: PlaybackInfoSchemasType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    bitrate: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bitrate'), 'exclude': lambda f: f is None }})
    height: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    size: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('size'), 'exclude': lambda f: f is None }})
    width: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    


class PlaybackInfoHrn(str, Enum):
    HLS_TS_ = 'HLS (TS)'

class PlaybackInfoSchemasMetaType(str, Enum):
    HTML5_APPLICATION_VND_APPLE_MPEGURL = 'html5/application/vnd.apple.mpegurl'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class DvrPlayback:
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    hrn: Optional[PlaybackInfoHrn] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hrn'), 'exclude': lambda f: f is None }})
    type: Optional[PlaybackInfoSchemasMetaType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type'), 'exclude': lambda f: f is None }})
    url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Meta:
    source: List[PlaybackInfoSource] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('source') }})
    attestation: Optional[Attestation] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attestation'), 'exclude': lambda f: f is None }})
    dvr_playback: Optional[List[DvrPlayback]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dvrPlayback'), 'exclude': lambda f: f is None }})
    live: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('live'), 'exclude': lambda f: f is None }})
    playback_policy: Optional[PlaybackPolicy] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playbackPolicy'), 'exclude': lambda f: f is None }})
    r"""Whether the playback policy for a asset or stream is public or signed"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class PlaybackInfo:
    meta: Meta = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('meta') }})
    type: PlaybackInfoType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    

