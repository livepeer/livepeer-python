"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from sdk import utils
from typing import List, Optional

class Events(str, Enum):
    STREAM_STARTED = 'stream.started'
    STREAM_DETECTION = 'stream.detection'
    STREAM_IDLE = 'stream.idle'
    RECORDING_READY = 'recording.ready'
    RECORDING_STARTED = 'recording.started'
    RECORDING_WAITING = 'recording.waiting'
    MULTISTREAM_CONNECTED = 'multistream.connected'
    MULTISTREAM_ERROR = 'multistream.error'
    MULTISTREAM_DISCONNECTED = 'multistream.disconnected'
    PLAYBACK_USER_NEW = 'playback.user.new'
    PLAYBACK_ACCESS_CONTROL = 'playback.accessControl'
    ASSET_CREATED = 'asset.created'
    ASSET_UPDATED = 'asset.updated'
    ASSET_FAILED = 'asset.failed'
    ASSET_READY = 'asset.ready'
    ASSET_DELETED = 'asset.deleted'
    TASK_SPAWNED = 'task.spawned'
    TASK_UPDATED = 'task.updated'
    TASK_COMPLETED = 'task.completed'
    TASK_FAILED = 'task.failed'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class LastFailure:
    r"""failure timestamp and error message with status code"""
    error: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('error'), 'exclude': lambda f: f is None }})
    r"""Webhook failure error message"""
    response: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('response'), 'exclude': lambda f: f is None }})
    r"""Webhook failure response"""
    status_code: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('statusCode'), 'exclude': lambda f: f is None }})
    r"""Webhook failure status code"""
    timestamp: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp'), 'exclude': lambda f: f is None }})
    r"""Timestamp (in milliseconds) at which the webhook last failed"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Status:
    r"""status of webhook"""
    last_failure: Optional[LastFailure] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastFailure'), 'exclude': lambda f: f is None }})
    r"""failure timestamp and error message with status code"""
    last_triggered_at: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('lastTriggeredAt'), 'exclude': lambda f: f is None }})
    r"""Timestamp (in milliseconds) at which the webhook last was
    triggered
    """
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Webhook:
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    created_at: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'exclude': lambda f: f is None }})
    r"""Timestamp (in milliseconds) at which stream object was created"""
    events: Optional[List[Events]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('events'), 'exclude': lambda f: f is None }})
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    status: Optional[Status] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    r"""status of webhook"""
    stream_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('streamId'), 'exclude': lambda f: f is None }})
    r"""streamId of the stream on which the webhook is applied"""
    

