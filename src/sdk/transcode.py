"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from .sdkconfiguration import SDKConfiguration
from sdk import utils
from sdk.models import components, errors, operations
from typing import Optional

class Transcode:
    sdk_configuration: SDKConfiguration

    def __init__(self, sdk_config: SDKConfiguration) -> None:
        self.sdk_configuration = sdk_config
        
    
    
    def create(self, request: components.TranscodePayload) -> operations.TranscodeResponse:
        r"""Transcode a video
        `POST /transcode` transcodes a video file and uploads the results to the
        specified storage service. 
        \
        \
        Transcoding is asynchronous so you will need to check the status of the
        task in order to determine when transcoding is complete. The `id` field
        in the response is the unique ID for the transcoding `Task`. The task
        status can be queried using the [GET tasks
        endpoint](https://docs.livepeer.org/reference/api/get-tasks):
        \
        \
        When `status.phase` is `completed`,  transcoding will be complete and
        the results will be stored in the storage service and the specified
        output location.
        \
        \
        The results will be available under `params.outputs.hls.path` and
        `params.outputs.mp4.path` in the specified storage service.
        ## Input
        \
        This endpoint currently supports the following inputs:
        - HTTP
        - S3 API Compatible Service
        \
        \
        **HTTP**
        \
        A public HTTP URL can be used to read a video file.
        ```json
        {
            \"url\": \"https://www.example.com/video.mp4\"
        }
        ```
        | Name | Type   | Description                          |
        | ---- | ------ | ------------------------------------ |
        | url  | string | A public HTTP URL for the video file. |

        Note: For IPFS HTTP gateway URLs, the API currently only supports “path
        style” URLs and does not support “subdomain style” URLs. The API will
        support both styles of URLs in a future update.
        \
        \
        **S3 API Compatible Service**
        \
        \
        S3 credentials can be used to authenticate with a S3 API compatible
        service to read a video file.

        ```json
        {
            \"type\": \"s3\",
            \"endpoint\": \"https://gateway.storjshare.io\",
            \"credentials\": {
                \"accessKeyId\": \"$ACCESS_KEY_ID\",
                \"secretAccessKey\": \"$SECRET_ACCESS_KEY\"
            },
            \"bucket\": \"inbucket\",
            \"path\": \"/video/source.mp4\"
        }
        ```


        ## Storage
        \
        This endpoint currently supports the following storage services:
        - S3 API Compatible Service
        - Web3 Storage
        \
        \
        **S3 API Compatible Service**
        ```json
        {
          \"type\": \"s3\",
            \"endpoint\": \"https://gateway.storjshare.io\",
            \"credentials\": {
                \"accessKeyId\": \"$ACCESS_KEY_ID\",
                \"secretAccessKey\": \"$SECRET_ACCESS_KEY\"
            },
            \"bucket\": \"mybucket\"
        }
        ```

        **Web3 Storage**

        ```json
        {
          \"type\": \"web3.storage\",
            \"credentials\": {
                \"proof\": \"$UCAN_DELEGATION_PROOF\",
            }
        }
        ```



        ## Outputs
        \
        This endpoint currently supports the following output types:
        - HLS
        - MP4

        **HLS**

        ```json
        {
          \"hls\": {
                \"path\": \"/samplevideo/hls\"
            }
        }
        ```


        **MP4**

        ```json
        {
          \"mp4\": {
                \"path\": \"/samplevideo/mp4\"
            }
        }
        ```
        """
        base_url = utils.template_url(*self.sdk_configuration.get_server_details())
        
        url = base_url + '/transcode'
        headers = {}
        req_content_type, data, form = utils.serialize_request_body(request, "request", False, False, 'json')
        if req_content_type not in ('multipart/form-data', 'multipart/mixed'):
            headers['content-type'] = req_content_type
        if data is None and form is None:
            raise Exception('request body is required')
        headers['Accept'] = 'application/json'
        headers['user-agent'] = self.sdk_configuration.user_agent
        
        if callable(self.sdk_configuration.security):
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security())
        else:
            client = utils.configure_security_client(self.sdk_configuration.client, self.sdk_configuration.security)
        
        http_res = client.request('POST', url, data=data, files=form, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.TranscodeResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[components.Task])
                res.task = out
            else:
                raise errors.SDKError(f'unknown content-type received: {content_type}', http_res.status_code, http_res.text, http_res)
        elif http_res.status_code >= 400 and http_res.status_code < 500 or http_res.status_code >= 500 and http_res.status_code < 600:
            raise errors.SDKError('API error occurred', http_res.status_code, http_res.text, http_res)

        return res

    