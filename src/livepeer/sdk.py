"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from .httpclient import AsyncHttpClient, HttpClient
from .sdkconfiguration import SDKConfiguration
from .utils.logger import Logger, get_default_logger
from .utils.retries import RetryConfig
import httpx
from livepeer import utils
from livepeer._hooks import SDKHooks
from livepeer.accesscontrol import AccessControl
from livepeer.asset import Asset
from livepeer.generate import Generate
from livepeer.metrics import Metrics
from livepeer.models import components
from livepeer.multistream import Multistream
from livepeer.playback import Playback
from livepeer.room import Room
from livepeer.session import Session
from livepeer.stream import Stream
from livepeer.task import Task
from livepeer.transcode import Transcode
from livepeer.types import OptionalNullable, UNSET
from livepeer.webhook import Webhook
from typing import Any, Callable, Dict, Optional, Union


class Livepeer(BaseSDK):
    r"""Livepeer API Reference: Welcome to the Livepeer API reference docs. Here you will find all the
    endpoints exposed on the standard Livepeer API, learn how to use them and
    what they return.

    """

    stream: Stream
    r"""Operations related to livestream api"""
    multistream: Multistream
    r"""Operations related to multistream api"""
    webhook: Webhook
    r"""Operations related to webhook api"""
    asset: Asset
    r"""Operations related to asset/vod api"""
    session: Session
    r"""Operations related to session api"""
    room: Room
    r"""Operations related to rooms api"""
    metrics: Metrics
    r"""Operations related to metrics api"""
    access_control: AccessControl
    r"""Operations related to access control/signing keys api"""
    task: Task
    r"""Operations related to tasks api"""
    transcode: Transcode
    r"""Operations related to transcode api"""
    playback: Playback
    r"""Operations related to playback api"""
    generate: Generate
    r"""Operations related to AI generate api"""

    def __init__(
        self,
        api_key: Union[str, Callable[[], str]],
        server_idx: Optional[int] = None,
        server_url: Optional[str] = None,
        url_params: Optional[Dict[str, str]] = None,
        client: Optional[HttpClient] = None,
        async_client: Optional[AsyncHttpClient] = None,
        retry_config: OptionalNullable[RetryConfig] = UNSET,
        timeout_ms: Optional[int] = None,
        debug_logger: Optional[Logger] = None,
    ) -> None:
        r"""Instantiates the SDK configuring it with the provided parameters.

        :param api_key: The api_key required for authentication
        :param server_idx: The index of the server to use for all methods
        :param server_url: The server URL to use for all methods
        :param url_params: Parameters to optionally template the server URL with
        :param client: The HTTP client to use for all synchronous methods
        :param async_client: The Async HTTP client to use for all asynchronous methods
        :param retry_config: The retry configuration to use for all supported methods
        :param timeout_ms: Optional request timeout applied to each operation in milliseconds
        """
        if client is None:
            client = httpx.Client()

        assert issubclass(
            type(client), HttpClient
        ), "The provided client must implement the HttpClient protocol."

        if async_client is None:
            async_client = httpx.AsyncClient()

        if debug_logger is None:
            debug_logger = get_default_logger()

        assert issubclass(
            type(async_client), AsyncHttpClient
        ), "The provided async_client must implement the AsyncHttpClient protocol."

        security: Any = None
        if callable(api_key):
            security = lambda: components.Security(api_key=api_key())  # pylint: disable=unnecessary-lambda-assignment
        else:
            security = components.Security(api_key=api_key)

        if server_url is not None:
            if url_params is not None:
                server_url = utils.template_url(server_url, url_params)

        BaseSDK.__init__(
            self,
            SDKConfiguration(
                client=client,
                async_client=async_client,
                security=security,
                server_url=server_url,
                server_idx=server_idx,
                retry_config=retry_config,
                timeout_ms=timeout_ms,
                debug_logger=debug_logger,
            ),
        )

        hooks = SDKHooks()

        current_server_url, *_ = self.sdk_configuration.get_server_details()
        server_url, self.sdk_configuration.client = hooks.sdk_init(
            current_server_url, self.sdk_configuration.client
        )
        if current_server_url != server_url:
            self.sdk_configuration.server_url = server_url

        # pylint: disable=protected-access
        self.sdk_configuration.__dict__["_hooks"] = hooks

        self._init_sdks()

    def _init_sdks(self):
        self.stream = Stream(self.sdk_configuration)
        self.multistream = Multistream(self.sdk_configuration)
        self.webhook = Webhook(self.sdk_configuration)
        self.asset = Asset(self.sdk_configuration)
        self.session = Session(self.sdk_configuration)
        self.room = Room(self.sdk_configuration)
        self.metrics = Metrics(self.sdk_configuration)
        self.access_control = AccessControl(self.sdk_configuration)
        self.task = Task(self.sdk_configuration)
        self.transcode = Transcode(self.sdk_configuration)
        self.playback = Playback(self.sdk_configuration)
        self.generate = Generate(self.sdk_configuration)
