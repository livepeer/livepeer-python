"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from livepeer import utils
from livepeer._hooks import HookContext
from livepeer.models import components, errors, operations
from livepeer.types import BaseModel, OptionalNullable, UNSET
from typing import Optional, Union, cast


class Transcode(BaseSDK):
    r"""Operations related to transcode api"""

    def create(
        self,
        *,
        request: Union[
            components.TranscodePayload, components.TranscodePayloadTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.TranscodeVideoResponse:
        r"""Transcode a video

        `POST /transcode` transcodes a video file and uploads the results to the
        specified storage service.
        \ 
        \ 
        Transcoding is asynchronous so you will need to check the status of the
        task in order to determine when transcoding is complete. The `id` field
        in the response is the unique ID for the transcoding `Task`. The task
        status can be queried using the [GET tasks
        endpoint](https://docs.livepeer.org/reference/api/get-tasks):
        \ 
        \ 
        When `status.phase` is `completed`,  transcoding will be complete and
        the results will be stored in the storage service and the specified
        output location.
        \ 
        \ 
        The results will be available under `params.outputs.hls.path` and
        `params.outputs.mp4.path` in the specified storage service.
        ## Input
        \ 
        This endpoint currently supports the following inputs:
        - HTTP
        - S3 API Compatible Service
        \ 
        \ 
        **HTTP**
        \ 
        A public HTTP URL can be used to read a video file.
        ```json
        {
        \"url\": \"https://www.example.com/video.mp4\" 
        }
        ```
        | Name | Type   | Description                          |
        | ---- | ------ | ------------------------------------ |
        | url  | string | A public HTTP URL for the video file. |

        Note: For IPFS HTTP gateway URLs, the API currently only supports “path
        style” URLs and does not support “subdomain style” URLs. The API will
        support both styles of URLs in a future update.
        \ 
        \ 
        **S3 API Compatible Service**
        \ 
        \ 
        S3 credentials can be used to authenticate with a S3 API compatible
        service to read a video file.

        ```json
        {
        \"type\": \"s3\",
        \"endpoint\": \"https://gateway.storjshare.io\",
        \"credentials\": {
        \"accessKeyId\": \"$ACCESS_KEY_ID\",
        \"secretAccessKey\": \"$SECRET_ACCESS_KEY\" 
        },
        \"bucket\": \"inbucket\",
        \"path\": \"/video/source.mp4\" 
        }
        ```


        ## Storage
        \ 
        This endpoint currently supports the following storage services:
        - S3 API Compatible Service
        - Web3 Storage
        \ 
        \ 
        **S3 API Compatible Service**
        ```json
        {
        \"type\": \"s3\",
        \"endpoint\": \"https://gateway.storjshare.io\",
        \"credentials\": {
        \"accessKeyId\": \"$ACCESS_KEY_ID\",
        \"secretAccessKey\": \"$SECRET_ACCESS_KEY\" 
        },
        \"bucket\": \"mybucket\" 
        }
        ```

        **Web3 Storage**

        ```json
        {
        \"type\": \"web3.storage\",
        \"credentials\": {
        \"proof\": \"$UCAN_DELEGATION_PROOF\",
        }
        }
        ```



        ## Outputs
        \ 
        This endpoint currently supports the following output types:
        - HLS
        - MP4

        **HLS**

        ```json
        {
        \"hls\": {
        \"path\": \"/samplevideo/hls\" 
        }
        }
        ```


        **MP4**

        ```json
        {
        \"mp4\": {
        \"path\": \"/samplevideo/mp4\" 
        }
        }
        ```


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, components.TranscodePayload)
        request = cast(components.TranscodePayload, request)

        req = self.build_request(
            method="POST",
            path="/transcode",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", components.TranscodePayload
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                operation_id="transcodeVideo",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.TranscodeVideoResponse(
                task=utils.unmarshal_json(http_res.text, Optional[components.Task]),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise errors.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return operations.TranscodeVideoResponse(
                error=utils.unmarshal_json(http_res.text, Optional[errors.Error]),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )

    async def create_async(
        self,
        *,
        request: Union[
            components.TranscodePayload, components.TranscodePayloadTypedDict
        ],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
    ) -> operations.TranscodeVideoResponse:
        r"""Transcode a video

        `POST /transcode` transcodes a video file and uploads the results to the
        specified storage service.
        \ 
        \ 
        Transcoding is asynchronous so you will need to check the status of the
        task in order to determine when transcoding is complete. The `id` field
        in the response is the unique ID for the transcoding `Task`. The task
        status can be queried using the [GET tasks
        endpoint](https://docs.livepeer.org/reference/api/get-tasks):
        \ 
        \ 
        When `status.phase` is `completed`,  transcoding will be complete and
        the results will be stored in the storage service and the specified
        output location.
        \ 
        \ 
        The results will be available under `params.outputs.hls.path` and
        `params.outputs.mp4.path` in the specified storage service.
        ## Input
        \ 
        This endpoint currently supports the following inputs:
        - HTTP
        - S3 API Compatible Service
        \ 
        \ 
        **HTTP**
        \ 
        A public HTTP URL can be used to read a video file.
        ```json
        {
        \"url\": \"https://www.example.com/video.mp4\" 
        }
        ```
        | Name | Type   | Description                          |
        | ---- | ------ | ------------------------------------ |
        | url  | string | A public HTTP URL for the video file. |

        Note: For IPFS HTTP gateway URLs, the API currently only supports “path
        style” URLs and does not support “subdomain style” URLs. The API will
        support both styles of URLs in a future update.
        \ 
        \ 
        **S3 API Compatible Service**
        \ 
        \ 
        S3 credentials can be used to authenticate with a S3 API compatible
        service to read a video file.

        ```json
        {
        \"type\": \"s3\",
        \"endpoint\": \"https://gateway.storjshare.io\",
        \"credentials\": {
        \"accessKeyId\": \"$ACCESS_KEY_ID\",
        \"secretAccessKey\": \"$SECRET_ACCESS_KEY\" 
        },
        \"bucket\": \"inbucket\",
        \"path\": \"/video/source.mp4\" 
        }
        ```


        ## Storage
        \ 
        This endpoint currently supports the following storage services:
        - S3 API Compatible Service
        - Web3 Storage
        \ 
        \ 
        **S3 API Compatible Service**
        ```json
        {
        \"type\": \"s3\",
        \"endpoint\": \"https://gateway.storjshare.io\",
        \"credentials\": {
        \"accessKeyId\": \"$ACCESS_KEY_ID\",
        \"secretAccessKey\": \"$SECRET_ACCESS_KEY\" 
        },
        \"bucket\": \"mybucket\" 
        }
        ```

        **Web3 Storage**

        ```json
        {
        \"type\": \"web3.storage\",
        \"credentials\": {
        \"proof\": \"$UCAN_DELEGATION_PROOF\",
        }
        }
        ```



        ## Outputs
        \ 
        This endpoint currently supports the following output types:
        - HLS
        - MP4

        **HLS**

        ```json
        {
        \"hls\": {
        \"path\": \"/samplevideo/hls\" 
        }
        }
        ```


        **MP4**

        ```json
        {
        \"mp4\": {
        \"path\": \"/samplevideo/mp4\" 
        }
        }
        ```


        :param request: The request object to send.
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url

        if not isinstance(request, BaseModel):
            request = utils.unmarshal(request, components.TranscodePayload)
        request = cast(components.TranscodePayload, request)

        req = self.build_request_async(
            method="POST",
            path="/transcode",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=True,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value="application/json",
            security=self.sdk_configuration.security,
            get_serialized_body=lambda: utils.serialize_request_body(
                request, False, False, "json", components.TranscodePayload
            ),
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                operation_id="transcodeVideo",
                oauth2_scopes=[],
                security_source=self.sdk_configuration.security,
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/json"):
            return operations.TranscodeVideoResponse(
                task=utils.unmarshal_json(http_res.text, Optional[components.Task]),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )
        if utils.match_response(http_res, ["4XX", "5XX"], "*"):
            raise errors.SDKError(
                "API error occurred", http_res.status_code, http_res.text, http_res
            )
        if utils.match_response(http_res, "default", "application/json"):
            return operations.TranscodeVideoResponse(
                error=utils.unmarshal_json(http_res.text, Optional[errors.Error]),
                http_meta=components.HTTPMetadata(request=req, response=http_res),
            )

        content_type = http_res.headers.get("Content-Type")
        raise errors.SDKError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res.text,
            http_res,
        )
