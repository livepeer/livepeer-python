"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .encryption import Encryption, EncryptionTypedDict
from .input_creator_id import InputCreatorID, InputCreatorIDTypedDict
from .playback_policy import PlaybackPolicy, PlaybackPolicyTypedDict
from .storage import Storage, StorageTypedDict
from .transcode_profile import TranscodeProfile, TranscodeProfileTypedDict
from livepeer.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class NewAssetFromURLPayloadTypedDict(TypedDict):
    name: str
    r"""The name of the asset. This is not necessarily the filename - it can be a custom name or title.

    """
    url: str
    r"""URL where the asset contents can be retrieved, e.g. `https://s3.amazonaws.com/my-bucket/path/filename.mp4`.
    For an IPFS source, this should be similar to: `ipfs://{CID}`. For an Arweave
    source: `ar://{CID}`.

    """
    static_mp4: NotRequired[bool]
    r"""Whether to generate MP4s for the asset."""
    playback_policy: NotRequired[Nullable[PlaybackPolicyTypedDict]]
    r"""Whether the playback policy for an asset or stream is public or signed"""
    creator_id: NotRequired[InputCreatorIDTypedDict]
    storage: NotRequired[StorageTypedDict]
    encryption: NotRequired[EncryptionTypedDict]
    c2pa: NotRequired[bool]
    r"""Decides if the output video should include C2PA signature"""
    profiles: NotRequired[Nullable[List[TranscodeProfileTypedDict]]]
    target_segment_size_secs: NotRequired[float]
    r"""How many seconds the duration of each output segment should be"""


class NewAssetFromURLPayload(BaseModel):
    name: str
    r"""The name of the asset. This is not necessarily the filename - it can be a custom name or title.

    """

    url: str
    r"""URL where the asset contents can be retrieved, e.g. `https://s3.amazonaws.com/my-bucket/path/filename.mp4`.
    For an IPFS source, this should be similar to: `ipfs://{CID}`. For an Arweave
    source: `ar://{CID}`.

    """

    static_mp4: Annotated[Optional[bool], pydantic.Field(alias="staticMp4")] = None
    r"""Whether to generate MP4s for the asset."""

    playback_policy: Annotated[
        OptionalNullable[PlaybackPolicy], pydantic.Field(alias="playbackPolicy")
    ] = UNSET
    r"""Whether the playback policy for an asset or stream is public or signed"""

    creator_id: Annotated[
        Optional[InputCreatorID], pydantic.Field(alias="creatorId")
    ] = None

    storage: Optional[Storage] = None

    encryption: Optional[Encryption] = None

    c2pa: Optional[bool] = None
    r"""Decides if the output video should include C2PA signature"""

    profiles: OptionalNullable[List[TranscodeProfile]] = UNSET

    target_segment_size_secs: Annotated[
        Optional[float], pydantic.Field(alias="targetSegmentSizeSecs")
    ] = None
    r"""How many seconds the duration of each output segment should be"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "staticMp4",
            "playbackPolicy",
            "creatorId",
            "storage",
            "encryption",
            "c2pa",
            "profiles",
            "targetSegmentSizeSecs",
        ]
        nullable_fields = ["playbackPolicy", "profiles"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
