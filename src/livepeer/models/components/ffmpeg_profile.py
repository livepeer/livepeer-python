"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Profile(str, Enum):
    H264_BASELINE = "H264Baseline"
    H264_MAIN = "H264Main"
    H264_HIGH = "H264High"
    H264_CONSTRAINED_HIGH = "H264ConstrainedHigh"


class Encoder(str, Enum):
    H_264 = "H.264"


class FfmpegProfileTypedDict(TypedDict):
    r"""Transcode profile"""

    width: int
    name: str
    height: int
    bitrate: int
    fps: int
    fps_den: NotRequired[int]
    quality: NotRequired[int]
    r"""Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.

    """
    gop: NotRequired[str]
    profile: NotRequired[Profile]
    encoder: NotRequired[Encoder]


class FfmpegProfile(BaseModel):
    r"""Transcode profile"""

    width: int

    name: str

    height: int

    bitrate: int

    fps: int

    fps_den: Annotated[Optional[int], pydantic.Field(alias="fpsDen")] = None

    quality: Optional[int] = None
    r"""Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it.

    """

    gop: Optional[str] = None

    profile: Optional[Profile] = None

    encoder: Optional[Encoder] = None
