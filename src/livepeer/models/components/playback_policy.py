"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from livepeer.types import BaseModel
import pydantic
from typing import Any, Dict, List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Type(str, Enum):
    PUBLIC = "public"
    JWT = "jwt"
    WEBHOOK = "webhook"


class PlaybackPolicyTypedDict(TypedDict):
    r"""Whether the playback policy for an asset or stream is public or signed"""

    type: Type
    webhook_id: NotRequired[str]
    r"""ID of the webhook to use for playback policy"""
    webhook_context: NotRequired[Dict[str, Any]]
    r"""User-defined webhook context"""
    refresh_interval: NotRequired[float]
    r"""Interval (in seconds) at which the playback policy should be
    refreshed (default 600 seconds)

    """
    allowed_origins: NotRequired[List[str]]
    r"""List of allowed origins for CORS playback (<scheme>://<hostname>:<port>, <scheme>://<hostname>)"""


class PlaybackPolicy(BaseModel):
    r"""Whether the playback policy for an asset or stream is public or signed"""

    type: Type

    webhook_id: Annotated[Optional[str], pydantic.Field(alias="webhookId")] = None
    r"""ID of the webhook to use for playback policy"""

    webhook_context: Annotated[
        Optional[Dict[str, Any]], pydantic.Field(alias="webhookContext")
    ] = None
    r"""User-defined webhook context"""

    refresh_interval: Annotated[
        Optional[float], pydantic.Field(alias="refreshInterval")
    ] = None
    r"""Interval (in seconds) at which the playback policy should be
    refreshed (default 600 seconds)

    """

    allowed_origins: Annotated[
        Optional[List[str]], pydantic.Field(alias="allowedOrigins")
    ] = None
    r"""List of allowed origins for CORS playback (<scheme>://<hostname>:<port>, <scheme>://<hostname>)"""
