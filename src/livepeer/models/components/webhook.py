"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from livepeer.types import BaseModel
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Events(str, Enum):
    STREAM_STARTED = "stream.started"
    STREAM_DETECTION = "stream.detection"
    STREAM_IDLE = "stream.idle"
    RECORDING_READY = "recording.ready"
    RECORDING_STARTED = "recording.started"
    RECORDING_WAITING = "recording.waiting"
    MULTISTREAM_CONNECTED = "multistream.connected"
    MULTISTREAM_ERROR = "multistream.error"
    MULTISTREAM_DISCONNECTED = "multistream.disconnected"
    PLAYBACK_USER_NEW = "playback.user.new"
    PLAYBACK_ACCESS_CONTROL = "playback.accessControl"
    ASSET_CREATED = "asset.created"
    ASSET_UPDATED = "asset.updated"
    ASSET_FAILED = "asset.failed"
    ASSET_READY = "asset.ready"
    ASSET_DELETED = "asset.deleted"
    TASK_SPAWNED = "task.spawned"
    TASK_UPDATED = "task.updated"
    TASK_COMPLETED = "task.completed"
    TASK_FAILED = "task.failed"


class LastFailureTypedDict(TypedDict):
    r"""failure timestamp and error message with status code"""

    timestamp: NotRequired[float]
    r"""Timestamp (in milliseconds) at which the webhook last failed"""
    error: NotRequired[str]
    r"""Webhook failure error message"""
    response: NotRequired[str]
    r"""Webhook failure response"""
    status_code: NotRequired[float]
    r"""Webhook failure status code"""


class LastFailure(BaseModel):
    r"""failure timestamp and error message with status code"""

    timestamp: Optional[float] = None
    r"""Timestamp (in milliseconds) at which the webhook last failed"""

    error: Optional[str] = None
    r"""Webhook failure error message"""

    response: Optional[str] = None
    r"""Webhook failure response"""

    status_code: Annotated[Optional[float], pydantic.Field(alias="statusCode")] = None
    r"""Webhook failure status code"""


class StatusTypedDict(TypedDict):
    r"""status of webhook"""

    last_failure: NotRequired[LastFailureTypedDict]
    r"""failure timestamp and error message with status code"""
    last_triggered_at: NotRequired[float]
    r"""Timestamp (in milliseconds) at which the webhook last was
    triggered

    """


class Status(BaseModel):
    r"""status of webhook"""

    last_failure: Annotated[
        Optional[LastFailure], pydantic.Field(alias="lastFailure")
    ] = None
    r"""failure timestamp and error message with status code"""

    last_triggered_at: Annotated[
        Optional[float], pydantic.Field(alias="lastTriggeredAt")
    ] = None
    r"""Timestamp (in milliseconds) at which the webhook last was
    triggered

    """


class WebhookTypedDict(TypedDict):
    name: str
    url: str
    id: NotRequired[str]
    kind: NotRequired[str]
    user_id: NotRequired[str]
    project_id: NotRequired[str]
    r"""The ID of the project"""
    created_at: NotRequired[float]
    r"""Timestamp (in milliseconds) at which stream object was created"""
    events: NotRequired[List[Events]]
    stream_id: NotRequired[str]
    r"""streamId of the stream on which the webhook is applied"""
    status: NotRequired[StatusTypedDict]
    r"""status of webhook"""


class Webhook(BaseModel):
    name: str

    url: str

    id: Optional[str] = None

    kind: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None

    user_id: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="userId",
        ),
    ] = None

    project_id: Annotated[Optional[str], pydantic.Field(alias="projectId")] = None
    r"""The ID of the project"""

    created_at: Annotated[Optional[float], pydantic.Field(alias="createdAt")] = None
    r"""Timestamp (in milliseconds) at which stream object was created"""

    events: Optional[List[Events]] = None

    stream_id: Annotated[Optional[str], pydantic.Field(alias="streamId")] = None
    r"""streamId of the stream on which the webhook is applied"""

    status: Optional[Status] = None
    r"""status of webhook"""


class WebhookInputTypedDict(TypedDict):
    name: str
    url: str
    project_id: NotRequired[str]
    r"""The ID of the project"""
    events: NotRequired[List[Events]]
    shared_secret: NotRequired[str]
    r"""shared secret used to sign the webhook payload"""
    stream_id: NotRequired[str]
    r"""streamId of the stream on which the webhook is applied"""


class WebhookInput(BaseModel):
    name: str

    url: str

    project_id: Annotated[Optional[str], pydantic.Field(alias="projectId")] = None
    r"""The ID of the project"""

    events: Optional[List[Events]] = None

    shared_secret: Annotated[Optional[str], pydantic.Field(alias="sharedSecret")] = None
    r"""shared secret used to sign the webhook payload"""

    stream_id: Annotated[Optional[str], pydantic.Field(alias="streamId")] = None
    r"""streamId of the stream on which the webhook is applied"""
