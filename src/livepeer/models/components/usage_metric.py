"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class UsageMetricTypedDict(TypedDict):
    r"""An individual metric about usage of a user."""

    user_id: NotRequired[str]
    r"""The user ID associated with the metric"""
    creator_id: NotRequired[str]
    r"""The creator ID associated with the metric"""
    delivery_usage_mins: NotRequired[float]
    r"""Total minutes of delivery usage."""
    total_usage_mins: NotRequired[float]
    r"""Total transcoded minutes."""
    storage_usage_mins: NotRequired[float]
    r"""Total minutes of storage usage."""


class UsageMetric(BaseModel):
    r"""An individual metric about usage of a user."""

    user_id: Annotated[Optional[str], pydantic.Field(alias="UserID")] = None
    r"""The user ID associated with the metric"""

    creator_id: Annotated[Optional[str], pydantic.Field(alias="CreatorID")] = None
    r"""The creator ID associated with the metric"""

    delivery_usage_mins: Annotated[
        Optional[float], pydantic.Field(alias="DeliveryUsageMins")
    ] = None
    r"""Total minutes of delivery usage."""

    total_usage_mins: Annotated[
        Optional[float], pydantic.Field(alias="TotalUsageMins")
    ] = None
    r"""Total transcoded minutes."""

    storage_usage_mins: Annotated[
        Optional[float], pydantic.Field(alias="StorageUsageMins")
    ] = None
    r"""Total minutes of storage usage."""
