"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class TargetAddPayloadSpecTypedDict(TypedDict):
    r"""Inline multistream target object. Will automatically
    create the target resource to be used by the created
    stream.

    """

    url: str
    r"""Livepeer-compatible multistream target URL (RTMP(S) or SRT)"""
    name: NotRequired[str]


class TargetAddPayloadSpec(BaseModel):
    r"""Inline multistream target object. Will automatically
    create the target resource to be used by the created
    stream.

    """

    url: str
    r"""Livepeer-compatible multistream target URL (RTMP(S) or SRT)"""

    name: Optional[str] = None


class TargetAddPayloadTypedDict(TypedDict):
    profile: str
    r"""Name of transcoding profile that should be sent. Use
    \"source\" for pushing source stream data

    """
    video_only: NotRequired[bool]
    r"""If true, the stream audio will be muted and only silent
    video will be pushed to the target.

    """
    id: NotRequired[str]
    r"""ID of multistream target object where to push this stream"""
    spec: NotRequired[TargetAddPayloadSpecTypedDict]
    r"""Inline multistream target object. Will automatically
    create the target resource to be used by the created
    stream.

    """


class TargetAddPayload(BaseModel):
    profile: str
    r"""Name of transcoding profile that should be sent. Use
    \"source\" for pushing source stream data

    """

    video_only: Annotated[Optional[bool], pydantic.Field(alias="videoOnly")] = False
    r"""If true, the stream audio will be muted and only silent
    video will be pushed to the target.

    """

    id: Optional[str] = None
    r"""ID of multistream target object where to push this stream"""

    spec: Optional[TargetAddPayloadSpec] = None
    r"""Inline multistream target object. Will automatically
    create the target resource to be used by the created
    stream.

    """
