"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .input_creator_id import InputCreatorID1
from .transcode_profile import TranscodeProfile
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from livepeer import utils
from typing import List, Optional, Union

class InputType(str, Enum):
    r"""Type of service. This is optional and defaults to `url` if
    ŚURL field is provided.
    """
    S3 = 's3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Credentials:
    r"""Credentials for the private input video storage"""
    access_key_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessKeyId') }})
    r"""Access Key ID"""
    secret_access_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretAccessKey') }})
    r"""Secret Access Key"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Input2:
    r"""S3-like storage input video"""
    type: InputType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of service. This is optional and defaults to `url` if
    ŚURL field is provided.
    """
    endpoint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint') }})
    r"""Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)"""
    bucket: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucket') }})
    r"""Bucket with input file"""
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""Path to the input file inside the bucket"""
    credentials: Credentials = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials') }})
    r"""Credentials for the private input video storage"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Input1:
    r"""URL input video"""
    url: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('url') }})
    r"""URL of the video to transcode"""
    


class TranscodePayloadStorageType(str, Enum):
    r"""Type of service used for output files"""
    WEB3_STORAGE = 'web3.storage'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranscodePayloadStorageCredentials:
    r"""Delegation proof for Livepeer to be able to upload to
    web3.storage
    """
    proof: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('proof') }})
    r"""Base64 encoded UCAN delegation proof"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Storage2:
    r"""Storage for the output files"""
    type: TranscodePayloadStorageType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of service used for output files"""
    credentials: TranscodePayloadStorageCredentials = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials') }})
    r"""Delegation proof for Livepeer to be able to upload to
    web3.storage
    """
    


class StorageType(str, Enum):
    r"""Type of service used for output files"""
    S3 = 's3'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class StorageCredentials:
    r"""Credentials for the output video storage"""
    access_key_id: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('accessKeyId') }})
    r"""Access Key ID"""
    secret_access_key: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('secretAccessKey') }})
    r"""Secret Access Key"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Storage1:
    r"""Storage for the output files"""
    type: StorageType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('type') }})
    r"""Type of service used for output files"""
    endpoint: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('endpoint') }})
    r"""Service endpoint URL (AWS S3 endpoint list: https://docs.aws.amazon.com/general/latest/gr/s3.html, GCP S3 endpoint: https://storage.googleapis.com, Storj: https://gateway.storjshare.io)"""
    bucket: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bucket') }})
    r"""Bucket with output files"""
    credentials: StorageCredentials = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('credentials') }})
    r"""Credentials for the output video storage"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Hls:
    r"""HLS output format"""
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""Path for the HLS output"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Mp4:
    r"""MP4 output format"""
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""Path for the MP4 output"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Fmp4:
    r"""FMP4 output format"""
    path: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('path') }})
    r"""Path for the FMP4 output"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Outputs:
    r"""Output formats"""
    hls: Optional[Hls] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('hls'), 'exclude': lambda f: f is None }})
    r"""HLS output format"""
    mp4: Optional[Mp4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('mp4'), 'exclude': lambda f: f is None }})
    r"""MP4 output format"""
    fmp4: Optional[Fmp4] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fmp4'), 'exclude': lambda f: f is None }})
    r"""FMP4 output format"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranscodePayload:
    input: Union[Input1, Input2] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('input') }})
    storage: Union[Storage1, Storage2] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage') }})
    outputs: Outputs = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('outputs') }})
    r"""Output formats"""
    profiles: Optional[List[TranscodeProfile]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profiles'), 'exclude': lambda f: f is None }})
    target_segment_size_secs: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('targetSegmentSizeSecs'), 'exclude': lambda f: f is None }})
    r"""How many seconds the duration of each output segment should be"""
    creator_id: Optional[Union[InputCreatorID1, str]] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('creatorId'), 'exclude': lambda f: f is None }})
    c2pa: Optional[bool] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('c2pa'), 'exclude': lambda f: f is None }})
    r"""Decides if the output video should include C2PA signature"""
    

