"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class NftMetadataTemplate(str, Enum):
    r"""Name of the NFT metadata template to export. 'player'
    will embed the Livepeer Player on the NFT while 'file'
    will reference only the immutable MP4 files.

    """

    FILE = "file"
    PLAYER = "player"


class NftMetadataTypedDict(TypedDict):
    r"""Additional data to add to the NFT metadata exported to
    IPFS. Will be deep merged with the default metadata
    exported.

    """


class NftMetadata(BaseModel):
    r"""Additional data to add to the NFT metadata exported to
    IPFS. Will be deep merged with the default metadata
    exported.

    """


class SpecTypedDict(TypedDict):
    nft_metadata_template: NotRequired[NftMetadataTemplate]
    r"""Name of the NFT metadata template to export. 'player'
    will embed the Livepeer Player on the NFT while 'file'
    will reference only the immutable MP4 files.

    """
    nft_metadata: NotRequired[NftMetadataTypedDict]
    r"""Additional data to add to the NFT metadata exported to
    IPFS. Will be deep merged with the default metadata
    exported.

    """


class Spec(BaseModel):
    nft_metadata_template: Annotated[
        Optional[NftMetadataTemplate], pydantic.Field(alias="nftMetadataTemplate")
    ] = NftMetadataTemplate.FILE
    r"""Name of the NFT metadata template to export. 'player'
    will embed the Livepeer Player on the NFT while 'file'
    will reference only the immutable MP4 files.

    """

    nft_metadata: Annotated[
        Optional[NftMetadata], pydantic.Field(alias="nftMetadata")
    ] = None
    r"""Additional data to add to the NFT metadata exported to
    IPFS. Will be deep merged with the default metadata
    exported.

    """
