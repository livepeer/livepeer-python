"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class Phase(str, Enum):
    r"""Phase of the asset storage"""

    WAITING = "waiting"
    PROCESSING = "processing"
    READY = "ready"
    FAILED = "failed"
    REVERTED = "reverted"


class TasksTypedDict(TypedDict):
    pending: NotRequired[str]
    r"""ID of any currently running task that is exporting this
    asset to IPFS.

    """
    last: NotRequired[str]
    r"""ID of the last task to run successfully, that created
    the currently saved data.

    """
    failed: NotRequired[str]
    r"""ID of the last task to fail execution."""


class Tasks(BaseModel):
    pending: Optional[str] = None
    r"""ID of any currently running task that is exporting this
    asset to IPFS.

    """

    last: Optional[str] = None
    r"""ID of the last task to run successfully, that created
    the currently saved data.

    """

    failed: Optional[str] = None
    r"""ID of the last task to fail execution."""


class StorageStatusTypedDict(TypedDict):
    phase: Phase
    r"""Phase of the asset storage"""
    tasks: TasksTypedDict
    progress: NotRequired[float]
    r"""Current progress of the task updating the storage."""
    error_message: NotRequired[str]
    r"""Error message if the last storage changed failed."""


class StorageStatus(BaseModel):
    phase: Phase
    r"""Phase of the asset storage"""

    tasks: Tasks

    progress: Optional[float] = None
    r"""Current progress of the task updating the storage."""

    error_message: Annotated[Optional[str], pydantic.Field(alias="errorMessage")] = None
    r"""Error message if the last storage changed failed."""
