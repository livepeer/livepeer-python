"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .input_creator_id import InputCreatorID, InputCreatorIDTypedDict
from .playback_policy import PlaybackPolicy, PlaybackPolicyTypedDict
from .storage import Storage, StorageTypedDict
from livepeer.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class AssetPatchPayloadTypedDict(TypedDict):
    name: NotRequired[str]
    r"""The name of the asset. This is not necessarily the filename - it can be a custom name or title.

    """
    creator_id: NotRequired[InputCreatorIDTypedDict]
    playback_policy: NotRequired[Nullable[PlaybackPolicyTypedDict]]
    r"""Whether the playback policy for an asset or stream is public or signed"""
    storage: NotRequired[StorageTypedDict]


class AssetPatchPayload(BaseModel):
    name: Optional[str] = None
    r"""The name of the asset. This is not necessarily the filename - it can be a custom name or title.

    """

    creator_id: Annotated[
        Optional[InputCreatorID], pydantic.Field(alias="creatorId")
    ] = None

    playback_policy: Annotated[
        OptionalNullable[PlaybackPolicy], pydantic.Field(alias="playbackPolicy")
    ] = UNSET
    r"""Whether the playback policy for an asset or stream is public or signed"""

    storage: Optional[Storage] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name", "creatorId", "playbackPolicy", "storage"]
        nullable_fields = ["playbackPolicy"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
