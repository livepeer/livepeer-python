"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from .storage_status import StorageStatus
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from livepeer import utils
from typing import Any, List, Optional

class PrimaryType(str, Enum):
    r"""Video Metadata EIP-712 primaryType"""
    VIDEO_ATTESTATION = 'VideoAttestation'

class Name(str, Enum):
    VERIFIABLE_VIDEO = 'Verifiable Video'

class Version(str, Enum):
    ONE = '1'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Domain:
    r"""Video Metadata EIP-712 domain"""
    name: Name = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    version: Version = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('version') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Attestations:
    role: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('role') }})
    address: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('address') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Message:
    r"""Video Metadata EIP-712 message content"""
    video: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('video') }})
    attestations: List[Attestations] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('attestations') }})
    signer: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signer') }})
    timestamp: float = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('timestamp') }})
    


class SignatureType(str, Enum):
    EIP712 = 'eip712'
    FLOW = 'flow'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttestationIpfs:
    dollar_ref: Optional[Any] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('$ref'), 'exclude': lambda f: f is None }})
    updated_at: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('updatedAt'), 'exclude': lambda f: f is None }})
    r"""Timestamp (in milliseconds) at which IPFS export task was updated"""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class AttestationStorage:
    ipfs: Optional[AttestationIpfs] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('ipfs'), 'exclude': lambda f: f is None }})
    status: Optional[StorageStatus] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('status'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class Attestation:
    primary_type: PrimaryType = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('primaryType') }})
    r"""Video Metadata EIP-712 primaryType"""
    domain: Domain = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('domain') }})
    r"""Video Metadata EIP-712 domain"""
    message: Message = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('message') }})
    r"""Video Metadata EIP-712 message content"""
    signature: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signature') }})
    r"""Video Metadata EIP-712 message signature"""
    id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('id'), 'exclude': lambda f: f is None }})
    created_at: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('createdAt'), 'exclude': lambda f: f is None }})
    r"""Timestamp (in milliseconds) at which the object was created"""
    signature_type: Optional[SignatureType] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('signatureType'), 'exclude': lambda f: f is None }})
    storage: Optional[AttestationStorage] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('storage'), 'exclude': lambda f: f is None }})
    

