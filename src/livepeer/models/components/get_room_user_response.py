"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetRoomUserResponseTypedDict(TypedDict):
    id: NotRequired[str]
    r"""The ID of the user"""
    joined_at: NotRequired[int]
    r"""Timestamp (in milliseconds) at which the user joined"""
    name: NotRequired[str]
    r"""The display name of the user"""
    is_publisher: NotRequired[bool]
    r"""Whether a user is allowed to publish audio/video tracks"""
    metadata: NotRequired[str]
    r"""User defined payload to store for the participant"""


class GetRoomUserResponse(BaseModel):
    id: Optional[str] = None
    r"""The ID of the user"""

    joined_at: Annotated[Optional[int], pydantic.Field(alias="joinedAt")] = None
    r"""Timestamp (in milliseconds) at which the user joined"""

    name: Optional[str] = None
    r"""The display name of the user"""

    is_publisher: Annotated[Optional[bool], pydantic.Field(alias="isPublisher")] = True
    r"""Whether a user is allowed to publish audio/video tracks"""

    metadata: Optional[str] = None
    r"""User defined payload to store for the participant"""
