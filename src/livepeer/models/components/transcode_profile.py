"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from livepeer import utils
from typing import Optional


class TranscodeProfileProfile(str, Enum):
    H264_BASELINE = 'H264Baseline'
    H264_MAIN = 'H264Main'
    H264_HIGH = 'H264High'
    H264_CONSTRAINED_HIGH = 'H264ConstrainedHigh'


class TranscodeProfileEncoder(str, Enum):
    H_264 = 'H.264'
    HEVC = 'HEVC'
    VP8 = 'VP8'
    VP9 = 'VP9'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class TranscodeProfile:
    r"""Transcode API profile"""
    bitrate: int = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('bitrate') }})
    width: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('width'), 'exclude': lambda f: f is None }})
    name: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name'), 'exclude': lambda f: f is None }})
    height: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('height'), 'exclude': lambda f: f is None }})
    quality: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('quality'), 'exclude': lambda f: f is None }})
    r"""Restricts the size of the output video using the constant quality feature. Increasing this value will result in a lower quality video. Note that this parameter might not work if the transcoder lacks support for it."""
    fps: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fps'), 'exclude': lambda f: f is None }})
    fps_den: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('fpsDen'), 'exclude': lambda f: f is None }})
    gop: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('gop'), 'exclude': lambda f: f is None }})
    profile: Optional[TranscodeProfileProfile] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('profile'), 'exclude': lambda f: f is None }})
    encoder: Optional[TranscodeProfileEncoder] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('encoder'), 'exclude': lambda f: f is None }})
    

