"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class ClipPayloadTypedDict(TypedDict):
    playback_id: str
    r"""The playback ID of the stream or stream recording to clip. Asset playback IDs are not supported yet."""
    start_time: float
    r"""The start timestamp of the clip in Unix milliseconds. _See the ClipTrigger in the UI Kit for an example of how this is calculated (for HLS, it uses `Program Date-Time` tags, and for WebRTC, it uses the latency from server to client at stream startup)._"""
    end_time: NotRequired[float]
    r"""The end timestamp of the clip in Unix milliseconds. _See the ClipTrigger in the UI Kit for an example of how this is calculated (for HLS, it uses `Program Date-Time` tags, and for WebRTC, it uses the latency from server to client at stream startup)._"""
    name: NotRequired[str]
    r"""The optional friendly name of the clip to create."""
    session_id: NotRequired[str]
    r"""The optional session ID of the stream to clip. This can be used to clip _recordings_ - if it is not specified, it will clip the ongoing livestream."""


class ClipPayload(BaseModel):
    playback_id: Annotated[str, pydantic.Field(alias="playbackId")]
    r"""The playback ID of the stream or stream recording to clip. Asset playback IDs are not supported yet."""

    start_time: Annotated[float, pydantic.Field(alias="startTime")]
    r"""The start timestamp of the clip in Unix milliseconds. _See the ClipTrigger in the UI Kit for an example of how this is calculated (for HLS, it uses `Program Date-Time` tags, and for WebRTC, it uses the latency from server to client at stream startup)._"""

    end_time: Annotated[Optional[float], pydantic.Field(alias="endTime")] = None
    r"""The end timestamp of the clip in Unix milliseconds. _See the ClipTrigger in the UI Kit for an example of how this is calculated (for HLS, it uses `Program Date-Time` tags, and for WebRTC, it uses the latency from server to client at stream startup)._"""

    name: Optional[str] = None
    r"""The optional friendly name of the clip to create."""

    session_id: Annotated[Optional[str], pydantic.Field(alias="sessionId")] = None
    r"""The optional session ID of the stream to clip. This can be used to clip _recordings_ - if it is not specified, it will clip the ongoing livestream."""
