"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.models.components import (
    httpmetadata as components_httpmetadata,
    task as components_task,
)
from livepeer.types import BaseModel
from livepeer.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetTaskRequestTypedDict(TypedDict):
    task_id: str
    r"""ID of the task"""


class GetTaskRequest(BaseModel):
    task_id: Annotated[
        str,
        pydantic.Field(alias="taskId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""ID of the task"""


class GetTaskResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    task: NotRequired[components_task.TaskTypedDict]
    r"""Success"""


class GetTaskResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    task: Optional[components_task.Task] = None
    r"""Success"""
