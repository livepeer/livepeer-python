"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from livepeer.models.components import (
    httpmetadata as components_httpmetadata,
    realtime_viewership_metric as components_realtime_viewership_metric,
)
from livepeer.models.errors import error as errors_error
from livepeer.types import BaseModel
from livepeer.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class BreakdownBy(str, Enum):
    PLAYBACK_ID = "playbackId"
    DEVICE = "device"
    BROWSER = "browser"
    COUNTRY = "country"


class GetRealtimeViewershipNowRequestTypedDict(TypedDict):
    playback_id: NotRequired[str]
    r"""The playback ID to filter the query results. This can be a canonical
    playback ID from Livepeer assets or streams, or dStorage identifiers
    for assets

    """
    creator_id: NotRequired[str]
    r"""The creator ID to filter the query results"""
    breakdown_by: NotRequired[List[BreakdownBy]]
    r"""The list of fields to break down the query results. Specify this
    query-string multiple times to break down by multiple fields.

    """


class GetRealtimeViewershipNowRequest(BaseModel):
    playback_id: Annotated[
        Optional[str],
        pydantic.Field(alias="playbackId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The playback ID to filter the query results. This can be a canonical
    playback ID from Livepeer assets or streams, or dStorage identifiers
    for assets

    """

    creator_id: Annotated[
        Optional[str],
        pydantic.Field(alias="creatorId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The creator ID to filter the query results"""

    breakdown_by: Annotated[
        Optional[List[BreakdownBy]],
        pydantic.Field(alias="breakdownBy[]"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The list of fields to break down the query results. Specify this
    query-string multiple times to break down by multiple fields.

    """


class GetRealtimeViewershipNowResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    data: NotRequired[
        List[components_realtime_viewership_metric.RealtimeViewershipMetricTypedDict]
    ]
    r"""A list of Metric objects"""
    error: NotRequired[errors_error.Error]
    r"""Error"""


class GetRealtimeViewershipNowResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    data: Optional[
        List[components_realtime_viewership_metric.RealtimeViewershipMetric]
    ] = None
    r"""A list of Metric objects"""

    error: Optional[errors_error.Error] = None
    r"""Error"""
