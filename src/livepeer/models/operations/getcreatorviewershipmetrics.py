"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from enum import Enum
from livepeer.models.components import (
    httpmetadata as components_httpmetadata,
    viewership_metric as components_viewership_metric,
)
from livepeer.models.errors import error as errors_error
from livepeer.types import BaseModel
from livepeer.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


QueryParamFromTypedDict = Union[datetime, int]
r"""Start timestamp for the query range (inclusive)"""


QueryParamFrom = Union[datetime, int]
r"""Start timestamp for the query range (inclusive)"""


QueryParamToTypedDict = Union[datetime, int]
r"""End timestamp for the query range (exclusive)"""


QueryParamTo = Union[datetime, int]
r"""End timestamp for the query range (exclusive)"""


class QueryParamTimeStep(str, Enum):
    r"""The time step to aggregate viewership metrics by"""

    HOUR = "hour"
    DAY = "day"
    WEEK = "week"
    MONTH = "month"
    YEAR = "year"


class GetCreatorViewershipMetricsQueryParamBreakdownBy(str, Enum):
    DEVICE_TYPE = "deviceType"
    DEVICE = "device"
    CPU = "cpu"
    OS = "os"
    BROWSER = "browser"
    BROWSER_ENGINE = "browserEngine"
    CONTINENT = "continent"
    COUNTRY = "country"
    SUBDIVISION = "subdivision"
    TIMEZONE = "timezone"
    VIEWER_ID = "viewerId"


class GetCreatorViewershipMetricsRequestTypedDict(TypedDict):
    from_: NotRequired[QueryParamFromTypedDict]
    r"""Start timestamp for the query range (inclusive)"""
    to: NotRequired[QueryParamToTypedDict]
    r"""End timestamp for the query range (exclusive)"""
    time_step: NotRequired[QueryParamTimeStep]
    r"""The time step to aggregate viewership metrics by"""
    asset_id: NotRequired[str]
    r"""The asset ID to filter metrics for"""
    stream_id: NotRequired[str]
    r"""The stream ID to filter metrics for"""
    creator_id: NotRequired[str]
    r"""The creator ID to filter the query results"""
    breakdown_by: NotRequired[List[GetCreatorViewershipMetricsQueryParamBreakdownBy]]
    r"""The list of fields to break down the query results. Specify this
    query-string multiple times to break down by multiple fields.

    """


class GetCreatorViewershipMetricsRequest(BaseModel):
    from_: Annotated[
        Optional[QueryParamFrom],
        pydantic.Field(alias="from"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Start timestamp for the query range (inclusive)"""

    to: Annotated[
        Optional[QueryParamTo],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""End timestamp for the query range (exclusive)"""

    time_step: Annotated[
        Optional[QueryParamTimeStep],
        pydantic.Field(alias="timeStep"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The time step to aggregate viewership metrics by"""

    asset_id: Annotated[
        Optional[str],
        pydantic.Field(alias="assetId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The asset ID to filter metrics for"""

    stream_id: Annotated[
        Optional[str],
        pydantic.Field(alias="streamId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The stream ID to filter metrics for"""

    creator_id: Annotated[
        Optional[str],
        pydantic.Field(alias="creatorId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The creator ID to filter the query results"""

    breakdown_by: Annotated[
        Optional[List[GetCreatorViewershipMetricsQueryParamBreakdownBy]],
        pydantic.Field(alias="breakdownBy[]"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The list of fields to break down the query results. Specify this
    query-string multiple times to break down by multiple fields.

    """


class GetCreatorViewershipMetricsResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    data: NotRequired[List[components_viewership_metric.ViewershipMetricTypedDict]]
    r"""A list of Metric objects"""
    error: NotRequired[errors_error.Error]
    r"""Error"""


class GetCreatorViewershipMetricsResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    data: Optional[List[components_viewership_metric.ViewershipMetric]] = None
    r"""A list of Metric objects"""

    error: Optional[errors_error.Error] = None
    r"""Error"""
