"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.models.components import (
    asset as components_asset,
    httpmetadata as components_httpmetadata,
)
from livepeer.models.errors import error as errors_error
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class TaskTypedDict(TypedDict):
    id: str


class Task(BaseModel):
    id: str


class RequestUploadDataTypedDict(TypedDict):
    r"""Success"""

    url: str
    r"""The direct upload endpoint for which supports PUT requests. **It is recommended to use the Tus endpoint for a better upload experience.**"""
    tus_endpoint: str
    r"""The [Tus-compatible](https://tus.io/) endpoint for resumable uploads. **This is the recommended way to upload assets.** See the [Tus-js](https://github.com/tus/tus-js-client) client for more information."""
    asset: components_asset.AssetTypedDict
    task: TaskTypedDict


class RequestUploadData(BaseModel):
    r"""Success"""

    url: str
    r"""The direct upload endpoint for which supports PUT requests. **It is recommended to use the Tus endpoint for a better upload experience.**"""

    tus_endpoint: Annotated[str, pydantic.Field(alias="tusEndpoint")]
    r"""The [Tus-compatible](https://tus.io/) endpoint for resumable uploads. **This is the recommended way to upload assets.** See the [Tus-js](https://github.com/tus/tus-js-client) client for more information."""

    asset: components_asset.Asset

    task: Task


class RequestUploadResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    data: NotRequired[RequestUploadDataTypedDict]
    r"""Success"""
    error: NotRequired[errors_error.Error]
    r"""Error"""


class RequestUploadResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    data: Optional[RequestUploadData] = None
    r"""Success"""

    error: Optional[errors_error.Error] = None
    r"""Error"""
