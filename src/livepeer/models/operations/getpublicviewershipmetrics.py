"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.models.components import httpmetadata as components_httpmetadata
from livepeer.models.errors import error as errors_error
from livepeer.types import BaseModel
from livepeer.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetPublicViewershipMetricsRequestTypedDict(TypedDict):
    playback_id: str
    r"""The playback ID to filter the query results. This can be a canonical
    playback ID from Livepeer assets or streams, or dStorage identifiers
    for assets

    """


class GetPublicViewershipMetricsRequest(BaseModel):
    playback_id: Annotated[
        str,
        pydantic.Field(alias="playbackId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""The playback ID to filter the query results. This can be a canonical
    playback ID from Livepeer assets or streams, or dStorage identifiers
    for assets

    """


class GetPublicViewershipMetricsDataTypedDict(TypedDict):
    r"""A simplified metric object about aggregate viewership of an
    asset. Either playbackId or dStorageUrl will be set.

    """

    playback_id: NotRequired[str]
    r"""The playback ID associated with the metric."""
    d_storage_url: NotRequired[str]
    r"""The URL of the distributed storage used for the asset"""
    view_count: NotRequired[int]
    r"""The number of views for the stream/asset."""
    playtime_mins: NotRequired[float]
    r"""The total playtime in minutes for the stream/asset."""


class GetPublicViewershipMetricsData(BaseModel):
    r"""A simplified metric object about aggregate viewership of an
    asset. Either playbackId or dStorageUrl will be set.

    """

    playback_id: Annotated[Optional[str], pydantic.Field(alias="playbackId")] = None
    r"""The playback ID associated with the metric."""

    d_storage_url: Annotated[Optional[str], pydantic.Field(alias="dStorageUrl")] = None
    r"""The URL of the distributed storage used for the asset"""

    view_count: Annotated[Optional[int], pydantic.Field(alias="viewCount")] = None
    r"""The number of views for the stream/asset."""

    playtime_mins: Annotated[Optional[float], pydantic.Field(alias="playtimeMins")] = (
        None
    )
    r"""The total playtime in minutes for the stream/asset."""


class GetPublicViewershipMetricsResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    data: NotRequired[GetPublicViewershipMetricsDataTypedDict]
    r"""A single Metric object with the viewCount and playtimeMins metrics."""
    error: NotRequired[errors_error.Error]
    r"""Error"""


class GetPublicViewershipMetricsResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    data: Optional[GetPublicViewershipMetricsData] = None
    r"""A single Metric object with the viewCount and playtimeMins metrics."""

    error: Optional[errors_error.Error] = None
    r"""Error"""
