"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ...models.components import httpmetadata as components_httpmetadata
from ...models.errors import error as errors_error
from dataclasses_json import Undefined, dataclass_json
from livepeer import utils
from typing import Optional


@dataclasses.dataclass
class GetPublicViewershipMetricsRequest:
    playback_id: str = dataclasses.field(metadata={'path_param': { 'field_name': 'playbackId', 'style': 'simple', 'explode': False }})
    r"""The playback ID to filter the query results. This can be a canonical
    playback ID from Livepeer assets or streams, or dStorage identifiers
    for assets
    """
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPublicViewershipMetricsData:
    r"""A simplified metric object about aggregate viewership of an
    asset. Either playbackId or dStorageUrl will be set.
    """
    playback_id: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playbackId'), 'exclude': lambda f: f is None }})
    r"""The playback ID associated with the metric."""
    d_storage_url: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('dStorageUrl'), 'exclude': lambda f: f is None }})
    r"""The URL of the distributed storage used for the asset"""
    view_count: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('viewCount'), 'exclude': lambda f: f is None }})
    r"""The number of views for the stream/asset."""
    playtime_mins: Optional[float] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('playtimeMins'), 'exclude': lambda f: f is None }})
    r"""The total playtime in minutes for the stream/asset."""
    



@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class GetPublicViewershipMetricsResponse:
    http_meta: components_httpmetadata.HTTPMetadata = dataclasses.field(metadata={'dataclasses_json': { 'exclude': lambda f: True }})
    data: Optional[GetPublicViewershipMetricsData] = dataclasses.field(default=None)
    r"""A single Metric object with the viewCount and playtimeMins metrics."""
    error: Optional[errors_error.Error] = dataclasses.field(default=None)
    r"""Error"""
    

