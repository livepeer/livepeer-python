"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.models.components import (
    httpmetadata as components_httpmetadata,
    session as components_session,
)
from livepeer.models.errors import error as errors_error
from livepeer.types import BaseModel
from livepeer.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict, Union
from typing_extensions import Annotated, NotRequired


RecordTypedDict = Union[bool, int]
r"""Flag indicating if the response should only include recorded
sessions

"""


Record = Union[bool, int]
r"""Flag indicating if the response should only include recorded
sessions

"""


class GetRecordedSessionsRequestTypedDict(TypedDict):
    parent_id: str
    r"""ID of the parent stream"""
    record: NotRequired[RecordTypedDict]
    r"""Flag indicating if the response should only include recorded
    sessions

    """


class GetRecordedSessionsRequest(BaseModel):
    parent_id: Annotated[
        str,
        pydantic.Field(alias="parentId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""ID of the parent stream"""

    record: Annotated[
        Optional[Record],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Flag indicating if the response should only include recorded
    sessions

    """


class GetRecordedSessionsResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    data: NotRequired[List[components_session.SessionTypedDict]]
    r"""Success"""
    error: NotRequired[errors_error.Error]
    r"""Error"""


class GetRecordedSessionsResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    data: Optional[List[components_session.Session]] = None
    r"""Success"""

    error: Optional[errors_error.Error] = None
    r"""Error"""
