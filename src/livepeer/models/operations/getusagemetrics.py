"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from livepeer.models.components import (
    httpmetadata as components_httpmetadata,
    usage_metric as components_usage_metric,
)
from livepeer.models.errors import error as errors_error
from livepeer.types import BaseModel
from livepeer.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import List, Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetUsageMetricsQueryParamTimeStep(str, Enum):
    r"""The time step to aggregate viewership metrics by"""

    HOUR = "hour"
    DAY = "day"


class GetUsageMetricsQueryParamBreakdownBy(str, Enum):
    CREATOR_ID = "creatorId"


class GetUsageMetricsRequestTypedDict(TypedDict):
    from_: NotRequired[int]
    r"""Start millis timestamp for the query range (inclusive)

    """
    to: NotRequired[int]
    r"""End millis timestamp for the query range (exclusive)

    """
    time_step: NotRequired[GetUsageMetricsQueryParamTimeStep]
    r"""The time step to aggregate viewership metrics by

    """
    creator_id: NotRequired[str]
    r"""The creator ID to filter the query results

    """
    breakdown_by: NotRequired[List[GetUsageMetricsQueryParamBreakdownBy]]
    r"""The list of fields to break down the query results. Currently the
    only supported breakdown is by `creatorId`.

    """


class GetUsageMetricsRequest(BaseModel):
    from_: Annotated[
        Optional[int],
        pydantic.Field(alias="from"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Start millis timestamp for the query range (inclusive)

    """

    to: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""End millis timestamp for the query range (exclusive)

    """

    time_step: Annotated[
        Optional[GetUsageMetricsQueryParamTimeStep],
        pydantic.Field(alias="timeStep"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The time step to aggregate viewership metrics by

    """

    creator_id: Annotated[
        Optional[str],
        pydantic.Field(alias="creatorId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The creator ID to filter the query results

    """

    breakdown_by: Annotated[
        Optional[List[GetUsageMetricsQueryParamBreakdownBy]],
        pydantic.Field(alias="breakdownBy[]"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""The list of fields to break down the query results. Currently the
    only supported breakdown is by `creatorId`.

    """


class GetUsageMetricsResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    usage_metric: NotRequired[components_usage_metric.UsageMetricTypedDict]
    r"""A Usage Metric object"""
    error: NotRequired[errors_error.Error]
    r"""Error"""


class GetUsageMetricsResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    usage_metric: Optional[components_usage_metric.UsageMetric] = None
    r"""A Usage Metric object"""

    error: Optional[errors_error.Error] = None
    r"""Error"""
