"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.models.components import (
    httpmetadata as components_httpmetadata,
    session as components_session,
)
from livepeer.models.errors import error as errors_error
from livepeer.types import BaseModel
from livepeer.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class GetSessionRequestTypedDict(TypedDict):
    id: str
    r"""ID of the session"""


class GetSessionRequest(BaseModel):
    id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""ID of the session"""


class GetSessionResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    session: NotRequired[components_session.SessionTypedDict]
    r"""Success"""
    error: NotRequired[errors_error.Error]
    r"""Error"""


class GetSessionResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    session: Optional[components_session.Session] = None
    r"""Success"""

    error: Optional[errors_error.Error] = None
    r"""Error"""
