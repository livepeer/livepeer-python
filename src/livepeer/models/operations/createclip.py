"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from livepeer.models.components import (
    asset as components_asset,
    httpmetadata as components_httpmetadata,
)
from livepeer.models.errors import error as errors_error
from livepeer.types import BaseModel
import pydantic
from typing import Optional, TypedDict
from typing_extensions import Annotated, NotRequired


class CreateClipTaskTypedDict(TypedDict):
    id: NotRequired[str]


class CreateClipTask(BaseModel):
    id: Optional[str] = None


class CreateClipDataTypedDict(TypedDict):
    r"""Success"""

    asset: components_asset.AssetTypedDict
    task: CreateClipTaskTypedDict


class CreateClipData(BaseModel):
    r"""Success"""

    asset: components_asset.Asset

    task: CreateClipTask


class CreateClipResponseTypedDict(TypedDict):
    http_meta: components_httpmetadata.HTTPMetadataTypedDict
    data: NotRequired[CreateClipDataTypedDict]
    r"""Success"""
    error: NotRequired[errors_error.Error]
    r"""Error"""


class CreateClipResponse(BaseModel):
    http_meta: Annotated[
        Optional[components_httpmetadata.HTTPMetadata], pydantic.Field(exclude=True)
    ] = None

    data: Optional[CreateClipData] = None
    r"""Success"""

    error: Optional[errors_error.Error] = None
    r"""Error"""
